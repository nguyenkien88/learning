search engine (vs other data processing techs)
  text-centric
  read-dominant
  document-oriented
  flexible schema
  
  put user experience as a high priority
    quick
    misspelling
    synonyms
    phrase as a word
    score
    ....
  
  use cases
    keyword search
    beyond keyword search e.g. facet - categorize resultset => next discovery
	donot use
	  too large result set
	  need relation ship between document-oriented
	  to support document security (use with other tools)
	  
solr overview
  java web app, built on top of Lucene
  inverted index (by Lucene, also execute query, ranking): doc id - term frequency
  schema.xml: define index structure???
  access Solr through REST
  solr instance, multiple core (with separate config and index)
    for data patitioning
	for multi tenant
  extendable with plugins
  scalable (chapter 4)
  fault-tolerance (chapter 12/13)
  why sorl?
 
solr data import (e.g. from relational db - chapter 12)
  say, index contains (indexed) documents
  
running solr
  solr instance: solr directory - say solr home server for examples
  change default port (8983)
  core/instance(s): each core has own dir (under solr dir) with config and data
    say, a core for houses and a core for land listing
	schema.xml: configuration for indexing
	solrconfig.xml
  
query
  solr query form: query parameters
  ranking with score, boot score ipod^2
  admin and solritas
  facet: group to help user refine (keep explore) the result
  admin tools, core tools


concepts
  full-text search: search all text (not specific column)
  document: datasource (relational db, nosql db, text files...) => documents (fields with value) => indexing with solr
  schema.xml: contain fields type
  say, mapping documents to an inverted index - single terms along with (contained document. position)
  (search terms): require, optional, negate
  phrase => search using term position
  group expression
  fuzzy matching
    wildcard - not work for phare search e.g. "*ing hou?e" => store entire phrase as a term
	leading wildcard e.g. *ence - expensive => using ReversedWildCardFilterFactory (config - double index)
	range query: price:[10 TO 20] or price:[10 TO 20}
	edit-distance searching (based on Damerau-Levenshtein distances): e.g. adapt~2 say administrator is one distance away from the original word: administrator - should limit tu 2 tro xuong
	proximity searching: "chef officer"~1 - chef and officer max 1 distance away
  relevancy - Similarity classes - scoring algorithm
    term vector for the query
	term vector for each document
	small angel => more similar
	details (later)
  accuracy
    precision: correct return/total return (1 found, 1 corect -> 1.0 - thieu cung ok) => co chinh xac ko?
    recall: correct return/all corect => co miss nhieu ko?
	how to increase both? => boots high scores len top pages (high Precision) and included poor scores (high Recall)
  searching at scale (documents number and query number)
    denormalize documents: self contained - all info of the document inside itself (duplicated between documents) vs relation (foreign key) in ralational db
	=> extremely scability horizontally with multiple server - distributed searching
	say, each server - multi cores, each core - one index => aggregate result
	solr scales nearly linear

configuration
  start server 
  ->read solr.xml: system configuration
  ->read core.properties for earch core - auto discover core (otherwise must config in solr.xml)
      name, core config file, data, log...
  ->read solrconfig.xml - to initialize a core
      lucene version
	  lib: directory and match files in the dir
  request handler: search and update
  request handling
    request dispatcher
	  forward request to specific core
	    with specific <requestHanlder> e.g. select req handler
	parameter decoration then components chaning
	  <lst name="defaults">: defaults params if not set by client  
  
how to customize solr?
  extending class or configuration
	  
solr and hybris
  indexing: from hybris relational db to solr server (thuong dung cron job)
  2 flavors
    standalone sever
	cloud based/distributed sever
  config: solr.impex, solr_ent.impex, solr_trigger.impex
  indexing
    full
	   direct
	   2 phases
	update
	delete
  there are some built in cron job e.g. for Product	  
	
  
  
  