checkout-step vs order process
  multi-step-checkout-config.xml: steps before place order
  order-process.xml: after place order (start order-process by creating event with OrderProcessModel)

process engine - dynamic process definition
  create process, start process
  Action node: 3 standard actions and custom action 
  Wait node
    event...then...
	event with choice...then...
	timeout...then...
  Notify node
  End node
  Sub process
  ProcessDefinitionFactory creates the process definition when call BusinessProcessService.startProcess
  change and start process at runtime using backoffice

ordering process: https://help.hybris.com/1811/hcd/8c22ba688669101484c3b26ae09593ac.html
  Cart: potential order - 1 session 1 Cart, chu y truong hop nhieu Order cung Session
  Order
  delivery mode and payment mode
  calculated attr (CalculationService)
  Cart <=> Order <=> Consignment, OrderEntry 
  order business process - https://help.hybris.com/6.7.0/hcd/8c20e24d86691014ba61d588779202ae.html
  tracking state of and order, allow integrate 3rd party to react to order status change
  order versioning: system record change of an order
  order splitting: split into consignments (multi bps or different delivery addresses)
  order cancellation
  fraud checking
  stock info
  yacceleratorordermanagement:
    move from xml => impex to dynamic changing
	default ordermanagement process
	order process and consignment process
	return process
	send return label email process
  process engine
    define action in xml
    logic in bean or script	

order management modules
  is about the service after placed order: sourcing, splitting, pick/pack/label/confirm shipment (backoffice), return/refund, customer ticket, importing data (impex)
  user roles in oms: warehouseagent, warehousemanager, customersupportagent, customersupportmanager, admin, 3rd application (through web api)
  block diagram: https://help.sap.com/viewer/9d346683b0084da2938be8a285c0c27a/1905/en-US/8b446d01866910149e6aab9a9051a4a8.html
  2 perspectives
    customer support backoffice perspective: view/processing orders and returns, view fraud report
      user role: https://help.sap.com/viewer/9d346683b0084da2938be8a285c0c27a/1905/en-US/5d0e8d266dc34239af789ac954254299.html#loio5d0e8d266dc34239af789ac954254299
	  thuong dung de view/complete/cancel orders
	  cancel whole order (all products in the order) vs partial cancel
	  e.g. custom ancel in codengai
	    widget controller => custom cancel order service => WarehouseProcessingCancelRequestExecutor => OrderCancelledEventListener.... 
      hold orde - pending
	  return request - read more about return order
    warehouse backoffice perspective: realted to warehouse - consignment: consignment processing - start packing, shipping....pos, inventory - stock level, print pick/pack/shipping label
	  e.g. view for employee that have task related to consignment - consignment workflow: https://help.sap.com/viewer/9d346683b0084da2938be8a285c0c27a/1905/en-US/44742ff5072d4efba7f648535f7749fc.html
	  pick slip: products are picked to fullfill the order, can customize through template - https://help.sap.com/viewer/9d346683b0084da2938be8a285c0c27a/1905/en-US/8b457a5886691014a99cc7483e7612b4.html
	  pack slip
	  shipping label
	  confirm shipment
	  package info (for a consignment)
	  consignment tracking
	  decline consignment => reallocate => new consignment
	  point of service: physical branch store - linked to warehouse to keep track stock 
	  vs warehouse (many to many with warehouse)
	  

hybris pricing
  all about: PRICE, TAX, DISCOUNT of product
  isCalculated (Cart, Order, CartEntry, OrderEntry) -> trigger manualy theo business logic  CalculateService.calculate()
  pricing
    handle by europe1 extentions
	represent by PriceRow (potential price)
	  a price can be set different for channel (mobile, desktop), user, UserPriceGroup (vay moi goi la potential price)
	  say, with a customer, a product co the co nhieu PriceRow match -> filter to get the most relevance
	  scale price: buy 1 => 100 each, buy 10 => 95 each
	  net price: not including tax
	  gross price: including tax - https://help.sap.com/doc/011000358700001385532009e/8.82/en-US/HowTo_GrossPrices_88.pdf
	  currency conversion: auto by conversion rate
	  unitFactor: 100usd for 5 pieces
	  say, calculate price of a PriceRow
	  use BidDecimal for price with scale factor - jdbcmappings.big_decimal_scale (properties)
	  create list of PriceRow(europe1Prices) for ProductModel
	  => cuoi cung the factory will get the most relevance PriceRow (base on the product and current customer) - only 1 final price
	  see more: https://mjyothula.wordpress.com/2017/01/06/price-factory/
	tax calculation: all taxes of a product represent by TaxRow - getEurope1Taxes()
	  tuong tu PriceRow - potential tax
	  tax (and discount) is accumulate - apply nhieu tax (say, a TaxRow apply for customer/cg and product/pg - if non set) => apply for all
	  isAbsolute: chuyen nganh thue - thue tuyet doi la thue tinh ra so tien cu the e.g. 100bth, thue tuong doi: tinh theo % gia tri hang hoa => neo dung absolute = true (confirm)
	discount calculation: DiscountRow - potential, say, a discount is assigned to Product/pg or Customer/cg
	  similar to tax
	PDTRow: (PriceDiscountTax)
	orderEntry.getxxxPrice(), orderEntry.getTaxValues(), orderEntry.getDiscountValues(): 
	  final result: 1 price, multiple taxes, multiple discounts
	  result after Europe1PriceFactory run filtering/matching
	an orderEntry has taxValues()/discountValues() => co matched tax/discount
	TaxValue/DiscountValue apply(): apply for the tax/discount for the specific quantity, price, country (convertion rate) => get appliedValue() to get the real number.
  override price calculation: cartentry/orderentry: PriceFactory - default implementation is Europe1PriceFactory
    getBasePrice() 
    getTaxValues()
	getDiscountValues()
	see more: https://www.stechies.com/customize-price-factory/
  neo price
    cart and order
	  delivery cost
	  delivery tax
	  list discounts
	  payment cost
	  sub total/total price: total price of all entries (da co discount in tung entry)
	  total price before discount: sum(order entry * base price)
	  grand total: total price + delivery cost + payment cost
	  total discount
	  total tax
	  total tax values (co total price tinh nguoc ra tax)
	order entry
      base price
	  discount values
	  tax values
	  total price: before discount - discount
	  total price before discount
	  totalPriceBeforeDiscount (of order entry)
	  totalPrice (of order entry - totalPriceBeforeDiscount - discount)
	  subtotal (total price of 1 order entry - sum(subtotal) => order total)
	  discountvalues(of order entry)
	  taxvalues(of order entry)
	final price: order grand total = total price (da tinh discount tren tung entry) + delivery cost + payment cost (cac value khac (discount, tax) la internal)
	
	
  cart and order
    CartService
	when cart is created? 
	  getSessoinCart()
	  add entry to cart
	when cart is removed? 
	  cart stricly associated with session: when session het -> cart is removed automatically(sau khi place order van cart van con trong db)
	  CartService.removeSessionCart();
	when order is created?
	  OrderService.createOrder(): default same number (and other orders in same session) and creation date with cart
	order entry info config: orderentry.infofield.${typecode}



	