introduction
  Hybris is a platform that serve many purpose in business life cycle (not all)
  Flexible for db and web server
  SAP Hybris family
    Hybris commerce
    Hybris billing
    Hybris marketing
    Hybris cloud for Customer Sales
    Hybris cloud for Customer Service
  architecture
    Front end
    Accelerator (pre built b2b, b2c...- install by recipe => custom them), production?
    APIs (Service layer, Web service...)
    Extensions
    Platform (persistence layer, caching, security, transaction, conron job...)
    Application server: tomcat
    DB
  spring in hybris
    features usage
      di
      aop
      mvc
      security
	  spring profile: seperate beans definition for different environments
	new scope: yrequest
	application context: 
	  1 global application context for all extensions (many xml files e.g. global-catalog-spring.xml, global-core-spring.xml)
	  each tenant: 
	    1 application context (core application context - many xml files)
		  project.properties: <extname>.application-context = <extname>-spring.xml
		n web application context, each for web extensions (many xml files) (session and request scope)
	  in other way, each extension has many xml files: for global, core, web context
	  => context anh huong den visibility of beans between extensions and tenants
	override bean between extensions: same id, depend on build order (extensioninfo.xml <requires-extension>)
	https://help.hybris.com/1808/hcd/8c63621986691014a7e0a18695d7d410.html 

	
installation: dev vs production
  1. unzip
  2. build and initialize system
    cach 1: using recipe e.g. b2c_acc - only for development and demo purpose (e.g. installer-18.11.0-M6.jar)
	  setup (graddle task): add some config, dirs, copy some files to config using graddle, add require extensions to local_extension.xml
	  initialize
      after install accelerator => co 1 system hoan chinh (include sample data) can running on port 9002
      custom: add them/modify extension, addons, add more sample data... => need ant build/updatesystem
	cach 2: mannual
	  ant clean all - choose dev or prod template: add some config, dirs, build java, only basic extensions
	  ant initialize (database)
  3. start server and enjoy
  note: all config should be in config folder, when run => hybris copy to appropriate dir (inside platform) 
  initialize vs updateSystem different
    other dirs (not bin)
    .java
    database
  update online and offline system

	
configuration
  properties files
	local.properties in config overrides
	project.properties in each extension overrides
    project.properties in platform
  change
    runtime: using HAC, only effect in memory, when restart, config is load again from config file
    permanent: config file, before start server
	
  
type system
  extensionname-items.xml, not mandatory
  type
    new
	extends existing
	add attribute for existing
  items declaration order: follow the order rule
  each attr => 1 column
  create xxxModel and Generatedxxx
  deployment 
    co => create table, no => add to parent table, default is GenericItem (if build.development.mode=false, if true=> build fail, not prefered)  
    if parent already has deployment => consider not using in child (join table)
  generate (classes - build)
    "true" => generate related classes for this type
	"false" => update existing
  autocreate (table - update/initialize)
  autocreate and generate false thuong dung khi update e.g. add new column to existing type (add District to existing Address item)
  typecode: used internal for Hybris (PK generation), 32767>x>10000, duplicate => build fail
  read/write/search/optional
  persistence type
    property: used as column in db
	dynamic: not store in db, e.g. moi lan get ra can tinh lai e.g. age of customer in system
  define collection
  map
  enum
    dynamic enum: can change at runtime using backoffice/impex
  relation
  collecion vs relation: 1 way and 2 way mapping, collection is better in performance
  redeclare attribute in child (e.g. add read only, change datatype (only sub type is allowed))
  https://help.hybris.com/1808/hcd/8c755da8866910149c27ec908fc577ef.html  
  best practice: https://help.hybris.com/1808/hcd/8ecae959b9bd46b8b426fa8dbde5cac4.html


model(platform/bootstrap/gensrc): unifying all attributes from all extensions from xxx-items.xml (same code)
  model class generation: compile - e.g. ProductModel for all items with code="product"
	suppress generate model (and subtypes)/an attribute: <model generate="false"/>
	custome generated constructor/getter/setter
  model life cycle
	instantiating model (new/load from db)
	modifying
	saving: ModelService.save (all models)
	removing
  hybis default lazing loading: config - servicelayer.prefetch: 
	'all' (load also reference) 
	or 'literal'
	or 'none': default
  best practice: trong truong hop relation/collection nhieu data -> getter/setter can return many records and will be cached -> tang memory => should use flexible search => return 1 value.  	
  model context: manage models - only when create/load with modelService
	attach/detach model to model context: attach/detach
	belong to HybrisRequestScope (only 1 thread request) => when finish request/close session => auto release all models
	not thread safe => using SessionService?
	not use olds model reference after transaction rolled back
  modelService
    creating model
	  using constructor: attach when call save/attach, not have default values in items.xml util save,if want call initDefaults
	  using factory method:  modelService.create => in the context
	loading model
	  using pk
	  using flexibleSearchService: search()/searchUnique()
	  using sample model with flexibleSearchService: using new vs modelService.create()//have default values
	  search by localized attribute //need to attach to modelContext
	saving model
      save model with newly created & unsaved reference -> reference also is saved
	  save model with existing reference -> reference is not saved
	  saveAll()
	  collection: collection getter return unmodified list => need to create a new collection => modify and set again
	removing model
	refreshing model: refresh unsaved changes
	converting model and item?why?

  
impex: an extension in platform for import/export data
  export: e.g. when need initialize lai => export to csv, then import after initialize
  config running impex file during update/initialize in java code with @SytemSetup
  mode: insert/insert_update/update/removed/added
  type
  atribute
  modifier e.g. unique=true
  double quote for quote/line break
  macro e.g. $lang=lang_th
  comment
  impex complex type e.g. Product(code) => using code of Produc 
  cellDecorator modifier: change the import value base on some logic (implement in java class)
  https://help.hybris.com/1811/hcd/8bf2b22c866910149c44c1374a1a47f2.html
  

flexible search
  similar to sql using itemtype to query: order, join...
  conveted to sql to query
  sub type: select * from {Product} => subtype of Product will also retrieved
  search with runtime value
  flexibleSearchService.search(query, params)


product & catalog
  how to create products/categories? 3rd (erp...), file import, create manually
  categories
    categories structure: careful for using purpose
	visibility of category
	productcockpit (productmanager/1234)
  catalog versions
    container that contains categories
    represent products at 1 time
	multple catalog versions in 1 catalog
	Staged (for editing) => synchronize to Online version
	co the co nhieu hon 2 verions, tuy business steps (all have sames structure, only different state of products)
	only 1 is active at a time (for front end)
	CatalogVersionModel, rootCategories
	visibility of catalog version
	  in frontend is determined by the visibility of the categories inside
	  in backoffice
	adding catalog version
    synchronize catalog versions: source and target catalog version
  product catalog (products) vs content catalog (layout)
  catalog aware item type(aware for synchronize) and catalog unaware (not aware for synchronize, should not be different
  classification: https://help.hybris.com/1808/hcd/8b7aa49c86691014ae51c3b0d38cd87b.html
  multi language site: http://javainsimpleway.com/multi-country-site-in-hybris/
  https://help.hybris.com/1808/hcd/8c32805c866910148932c1df5d0e89c1.html
  

wcms: content types in storefront is built/managed by wcms module
  from extensions: CMS2, CMS2Lib, CMSCockpit => way to create/maintain website content
  content types
    structed content: from db
	unstructed: free textService
	dynamic: based on condition (e.g. user group)
	static: always the same for all users
  build: normal (need to follow wcms concept e.g. template, component...)
    moi lan tao insert_update => tao new instance e.g. of page template, of page, of component - all link together using uid
    page template: contains some contain slots names (position of a slot in template)
	  template model
	  jsp
	    template:page
		cms:pageSlot
		cms:component: to put component in later
	  INSERT_UPDATE PageTemplate...
    content slot: container of components - ContentSlotForPageTemplate, ContentSlotForPage
	  INSERT_UPDATE ContentSlotName
    page: actual displayed page e.g. product details page, bp landing page - AbstractPage, say a page uses a template
	  ko co jsp file for page: dung jsp cua page template + data from model (pass from controller)
	  truong hop nhieu pages share chung components luon thi co the add direct to template
	  item extens AbstractPage
	  instance of a page
	  INSERT_UPDATE Mypage
    component: say, add a component to a content slot
	  many built in components e.g. minicart, banner: INSERT_UPDATE CMSParagraphComponent
      custom cms component: https://www.stackextend.com/hybris/create-a-custom-cms-component-in-hybris/
	    how?
		  indentify the dynamic attributes of the components
		  create item model: co the extends from existing model
		  create jsp file (using model attributes)
		  create controller
		  => after build and update system, the component is ready for use like built-in one
		  change the vm file to get in the wcms cockpit??
	attach component to a page
	  create content slot (for a component): INSERT_UPDATE ContentSlot
	  attach it to specific page/template (common component): INSERT_UPDATE ContentSlotForPage/INSERT_UPDATE ContentSlotForTempate 
	note: dev create components, admin can use hac/smartedit/wcms cockpit to dynamic create/modify/remove/attach to specific pate/template  
		
  non-dev manage: usings tools e.g. CMScockpit (depreacated by SmartEdit), HMC or SmartEdit: ok
  

cron job
  execute some business logic (job) manually or auto via Trigger, run in backgound at own Thread
  use for long/periodic task
  how?
    CronJob hold the job and the input for each run
	Job: hold logic
	  HelloWorldCronJob model extends CronJob (hold data the job needs): identity of the job (items.xml)
	  HelloWorldJob extends AbstractJobPerformable 
	  create instance of ServicelayerJob (impex)
	  create instance of HelloWorldCronJob (impex): contains Job instance and input => run this cron job with logic in this job and this input
	  create instance of Trigger (impex - using cron expression or explicit time) => run the cronjob at specific time
  more: composite CronJob https://www.stackextend.com/hybris/use-composite-cronjob-in-hybris/

Extensions (like projects in java)
  structure: https://help.hybris.com/1811/hcd/8b49cab88669101489be9ac91a5f1ebb.html
  common: for pdf, mail...
  core: persistence, service, order processing - https://help.hybris.com/1811/hcd/8b94031786691014bb25f8fc4b404e07.html
  product cockpit
    status: Online and Staged  
  smart edit
  extgen vs modulegen : generate extension(s) base on template
  addon:
  

data validation (backend -  before persist)
  https://help.hybris.com/1811/hcd/8ba81fc286691014a111ee7a527abf72.html

  
ordering process: https://help.hybris.com/1811/hcd/8c22ba688669101484c3b26ae09593ac.html
  Cart: potential order - 1 session 1 Cart, chu y truong hop nhieu Order cung Session
  Order
  delivery mode and payment mode
  calculated attr (CalculationService)
  Cart <=> Order <=> Consignment, OrderEntry 
  order business process - https://help.hybris.com/6.7.0/hcd/8c20e24d86691014ba61d588779202ae.html
  tracking state of and order, allow integrate 3rd party to react to order status change
  order versioning: system record change of an order
  order splitting: split into consignments (multi bps or different delivery addresses)
  order cancellation
  fraud checking
  stock info
  yacceleratorordermanagement:
    move from xml => impex to dynamic changing
	default ordermanagement process
	order process and consignment process
	return process
	send return label email process
  process engine
    define action in xml
    logic in bean or script	

  
cockpit ui configuration: https://help.hybris.com/1808/hcd/8c75bc0a86691014af5affcff22bb0a2.html
  using xml: resources/xxx-config.xml
  updatesystem => restart server
  type of configuration component: listview, editor area, label...
  

backoffice framework: purpose - simplify development of backoffice application
  backoffice application is built on top of Backoffice framework, say, bo framework => widgets => bo application
  backoffice framework vs old Cockpit framework
  built by ZK Framework with bunch of widgets(e.g. Advanced Search widget, Editor Area widget): component to add to frontend (later)-application is made up from connecting (but stand-alone) widgets 
  
  cockpits (old cockpits and backoffice fw based cockpits)
    many cockpits with own purpose
	easily adapt day to day changes
    mcc: multi channel cockpit
	backoffice cockpit: sum of (product cockpit, customer service cockpit, ...)
	hac (admin console cockipit)
	admincockpit: user and validation
	smartedit/wcms
	cockpits are developed by ZK (zkoss) framework: web/mobile compability
	zul content will be saved/copied at server for next request => faster
	when zul - when site with many dynamic data (ex: cockpit page), when jsp - when most are static data?
    some backoffice cockpits (update to date)
      administration cockpit
      product cockpit
      adaptive search cockpit
      customer Support cockpit
      data hub cockpit
      order fulfillment cockpit
  the codengaibackoffice is an application build on top of Backoffice framework
  
  widget
    available widgets
    widget uses action (edit/delete...) and editor (checkbox, localize...): special predefined components can be added to widget	
    widget definition
	widget instance
	1 widget tree for a application
	moi widget co 1 slotid (left/right...), co controller, model rieng
	widget communication by message (with configure to action when messge come), easy be removed/added
	input/output (socket) declaration
	  say input socket notify the widget when something happen
	  should use json for in/output
	connection between 2 widgets (source and target)
  architecture: 2 importants extensions
    backoffice: standard widgets and components
	ybackoffice: for custom
  currentObject: selected object
  how to?
    use existing widget
    define new custom widget: https://hybrisdiary.com/2018/10/15/backoffice-customization/ 
      widget definition
      widget view: zul
      widget service
      widget controller
	  deploy and add using Application Orchestrator 
  some config path: https://help.hybris.com/1808/hcd/8bd4366a86691014b818f8dd642790a8.html
  parameterize widget (read setting infor from definition file - later)
  composed widget
    widgetslot and widgetchildren
	widget layout (prebuilt and custom)
  wizard widget (e.g. add a new product): https://help.hybris.com/1808/hcd/8bd6b110866910149666f5b05fb95681.html
  extends exising widget  
    
  
  make change in widget without rebuild (not including label change)
    backoffice.cockpitng.additionalResourceLoader.enabled=true
    backoffice.cockpitng.uifactory.cache.enabled=false
    backoffice.cockpitng.widgetclassloader.resourcecache.enabled=false
    backoffice.cockpitng.resourceloader.resourcecache.enabled=false
      

Process definition
  Action node: 3 standard actions and custom action 
  Wait node
  Notify node
  Starting process
  Sub process
  ProcessDefinitionFactory creates the process definition when call BusinessProcessService.startProcess

Tag file
  A tag file is a source file that contains a fragment of JSP code that is reusable as a custom tag


mobileservice extension
  Server side service: base on Action framework and process engine
  Cockpit for configuration
  Oneway and twoway message
  Phone is validated theo country
  IncomingSMSMessageGateway/DefaultIncomingSMSMessageGateway 
   textService.sendMessage or textService.sendLink
  SMSEngine: communicate with external system, many kinds of engine.
  MessageContextModel
  Terms
  Aggregator
  Short code (user send message to this number)
  CDMA/GSM networks
  Keyword
  https://help.hybris.com/1811/hcd/8c13383b866910149abadd87828b08bc.html
	
	
code layer
  jalo layer
    e.g. xxxGenerated.java
    deprecated => move to service layer - https://help.hybris.com/1811/hcd/8c00066686691014a5a5d19875a1525b.html
	truoc day contains all business and dao logic (not used jalo layer anymore, there are some old extensions still used => ignore)
  
  service layer
    functionality of extensions
    normally depends on: other service, persistence, strategy objects (all are beans)
	many built-in services: platform/servicelayer
	  3 grous - business service (order, cart), infrastructure service (multi language, import/export), system service (session)
	  FlexibleSearchService
	  SessionService
	  TimeService
	  UserService
	  ...
	can use existing, extends or define new service
	hook into model life cycle event
	hook into system life cycle (initialize/update)
	model (service layer) vs item (jalo layer)
	strategy
	  like strategy pattern: break service to smaller part with specific algorithms
	  think about NeoSmsPromotechStrategy, later can implement using other provider/other strategy
	  many built-in strategies
    interceptor: https://help.hybris.com/1808/hcd/8bfbf43e8669101480d0f060d79b1baa.html
	  a spring bean
	  based on model life cycle to do some additional work (e.g. validate)
	  types
	    InitDefaultsInterceptor
		LoadInterceptor
		PrepareInterceptor: before validate
		ValidateInterceptor
		RemoveInterceptor
	  how?
	    implement the Inteceptor: info - the model and InterceptorContext
		register as spring bean
		define mapping
		multiple interceptor for the model (and subtype) -> order, if not set: not difined order
		question: if use tool like impex -> is interceptor trigger => yes
	  disable interceptor
	    programming using sessionService
		declare in impex import: e.g. INSERT_UPDATE Currency[disable.interceptor.types=validate];isocode[unique=true];symbol;digits;
    event system
	  can across cluster nodes
	  event
	  event listener: extends AbstractEventListener
	  EventService.publishEvent()
	  register event
	    spring beans with parent="AbstractEventListener"
		eventService.registerEventListener
	  by default the event on thread local listeners run synchronous, in cluster run asynchronous (same node still synchronous)
	  built-in events
      cluster aware event: publish event to nodes in cluster, ClusterAwareEvent
	  transaction aware event: only publish at the end of transaction: https://help.hybris.com/1808/hcd/8bbbc04e866910149e93ca9faad254eb.html
	  using script to create event listener (no need rebuild and restart server): https://help.hybris.com/1808/hcd/8c53e973866910149f7f95676060d3de.html
    working with service layer: https://help.hybris.com/1808/hcd/8c5a3f0b86691014ba52a4ef46e4fa29.html
    how to extend? jut java
	
  converter: thuong dung convert Model and Data(dto)
  
  facade layer: 
    just wrap logic in 1 class, easy to interact - many built-in in commercefacade
	thuong tao facade khi muon extends funtion tu built-in facades e.g. NeoCustomerFacade extends CustomerFacade


email
  terms
    email template: subject, body
    email page
    email process: generate, send, remove
    email context
  how?
    need model contains some info in email (e.g. Consignment)
	define process: generate (new bean), send, remove
	create new email context (hold all data that sent to template)
	create email templates for subject and body using Velocity template
	impex: 
	  RendererTemplate - connect Context and vm file
	  EmailPageTemplate: create template with subject and body defined in RendererTemplate
	  EmailPage: instance of template
	config
	

event
  when use? let main thread keep running - send mail, save audit info...
    longtime run
	separate thread
	low priority
  how?
    Event extends AbstractEvent
	EventListener extends AbstractEventListener
	EventService publish event
	
	
Groovy script: run from hac to perfrom some quick task (clean, test...)	


solr: searching on lucene replication
  solr server
  rest api, based on Apache Lucene
  indexing: from hybris relational db to solr server (thuong dung cron job)
  Lucene uses inverted index mechanism
  2 flavors
    standalone sever
	cloud based/distributed sever
  Terms: Instance, core, document
  config: solr.impex, solr_ent.impex, solr_trigger.impex
  
  
	

other terms
  i18n: about localization










  
	
remain
  tag file?
  next:
    widget
	order business: https://help.hybris.com/6.7.0/hcd/029bb2dc43cd4787bd15bb5db7213432.html
  how to use existing extention?	
  how to extend/customize extention? (config? extends interface/class) 
  how to validation?
  lookthought all extensions
  role?
  ant
  graddle/groovy
  catalog version
  role/permission
  addon (vs extension)
  product variant
  stock level
  Strategy object
  tenant
  https://help.hybris.com/1808/hcd/8c75bc0a86691014af5affcff22bb0a2.html 
  UIComponentConfiguration
  UIConfigurationService
  Stock level
  http://javainsimpleway.com/how-to-index-database-columns-in-hybris/
  group/role
  hook
  populator
  transaction
  velocity template
  excel: https://help.hybris.com/6.7.0/hcd/bb77d8ae51e546138bec07a396f0803e.html
  Thread dump
  kiem course online to enroll
  zkoss: https://www.zkoss.org/wiki/ZK%20Component%20Reference
  
next: how to attrach new ui? 
  

