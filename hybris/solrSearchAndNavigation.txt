mainly indexing and searching product (storefront and backoffice)
terms
  indexed type: e.g. Product
  facet: grouping for continue navigation e.g. price facet
  
features
  search query template
    easy for customize e.g. remove fields like images from the suggestions template to improve the performance or change the sorting to draw the attention to certain products
    template for search query? built-in grouping, sorting, query - can customize
  manage search configuration
  
architecture
  solrfacetsearch extention: facet search and navigation
  solrserver extension: standalone solr server - recommend only for dev, in production should create separate solr server
  solrfacetsearchbackoffice extention
  
implementation
  installation
    support versions (expecially for production): https://tinyurl.com/y4po6llw
	configuration: standalone mode vs cloud mode - https://tinyurl.com/y57fglgl
	  solrserver/project.properties - can override in local.properties
	  e.g. solrserver.instances.default.autostart=true => auto start with the platform
	  solrserver.instances.default.mode=standalone vs solrserver.instances.cloud.mode=cloud
	  endpoint url: impex
  configuration
    under hybris/config/solr - default generated when build for the first time
	configsets: diferent configuration for different index types e.g. default configsets, backoffice config set
	schema.xml: the structure of the index
	solrconfig.xml
	config for instance: https://tinyurl.com/y39halsd
    ant tasks for solr
	solr.impex (priority vs .properties??)
	  SolrServerConfig: embedded (removed in 6.x) vs standalone vs cloud e.g. codengaiIndex
	  SolrEndpointUrl(belong to a SolrServerConfig) e.g http://localhost:8983/solr
	  SolrIndexConfig: batch size, number of thread, index mode (DIRECT or TWO_PHASE) 
	  SolrSearchConfig: page size e.g 20
	  SolrIndexedType: type to be indexed e.g. Product, sorting reference e.g. sortRef1, sortRef2
	  SolrFacetSearchConfig: link all above configs along with currencies, languages - then link to the site - BaseSite link 1 to 1 with SolrFacetSearchConfig
	  
	  
  indexing function
    indexing types
	  full index: deleted all existing index then re-index
	    direct mode: not rollback - row nao duoc index roi ko bi rollback, row nao fail thi thoi (lay version truoc)
		2 phases mode: rollback - In this mode,Solr creates one extra core as a temporary core only for indexing, once indexing is success then it will be swapped with original core
	  update index: only index for modified documents
	  delete index: remove indexed documents
    indexing process - using cron job
  searching function
    
      
 
  
  listener for indexing and searching process: https://tinyurl.com/y5ew7zaf
	
	
    
	
  

use case for kd: e.g. https://goodsmile-global.local:9002/kadokawaacceleratorstorefront/?sort=productPrivilegeFlg&q=%3AproductPrivilegeFlg
  using rest request for searching
    e.g. yq=*:*&q={!boost}(%2B{!lucene+v%3D$yq})&fq=allCategories_string_mv:CATEGORY\-ROOT&fq=(catalogId:"GSLS_GL\-PRODUCTCATALOG"+AND+catalogVersion:"Online")&sort=productPrivilegeFlg_boolean+desc&start=0&rows=40&facet.field=salesMethod_string&facet.field=price_jpy_string&facet.field=allPromotions_string_mv&facet.field=categoryPath_string_mv&facet.field=allCategories_string_mv&facet.field=displaySite_string_mv&facet.field=category_string_mv&facet.field=stockLevelStatus_string&facet=true&facet.sort=count&facet.mincount=1&facet.limit=50&fl=score,*
  GslsCategoryProductListGridComponentController
    calls productSearchFacade.categorySearch(searchQuery, pagingInfo)
      which calls productSearchService.searchAgain(searchQuery, pagingInfo)
	    which calls DefaultSolrProductSearchService.doSearch(searchQuery, pagingInfo) 
		  execute the search
		    call DefaultFacetSearchService.search()
			  which calls DefaultFacetSearchStrategy.search
			return solrSearchResponse which contains SolrDocuments result
		  then call defaultVisibilityFilteringSolrSearchResponseConverter to covert the response
		  which use many populators to convert the search response (note:a converter e.g. defaultVisibilityFilteringSolrSearchResponseConverter inherits all populators from parent e.g. abstractPopulatingConverter)
	  then call gslsProductCategorySearchPageConverter to convert the result
	    which calls gslsProductCategorySearchPagePopulator
		  which calls defaultCommerceSearchResultProductConverter
		    which calls gslsSearchResultProductPopulator
			
  GslsSolrQueryPostProcessor - solrQueryPostProcessors
    is used in defaultSolrQueryConverter
	  which is used in DefaultFacetSearchService (5.4 only)
	    => add more criteria to the search e.g. hanbaiEndDateDouble
		=> change the DefaultFacetSearchStrategy to legacyFacetSearchStrategy
		
    
			
			
			
			  
		  
		
		  
