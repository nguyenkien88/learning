https://help.sap.com/viewer/4c33bf189ab9409e84e589295c36d96e/1905/en-US/a795b4722f6942c091ef716c66ddb37d.html
who can create quote?
  buyer e.g. when they place an order with a really big quantity and want a special price
  or sales rep  (using asm): user group - salesemployee, salesapprover

the process?
  used in negotiation process
  say, buyer submit a quote request (cart value more than a amount (default: $25000 - include promotion)) to negociate the final price 
    then the sales rep adjust (add/remove product, add expiry date, comment...)
    and submit the verndor quote to seller approval (if the quote value exeed the vendor threshold, if not => auto approved)
      if reject -> send back to sales rep
      if approve -> send to buyer
        if reject -> send to sales rep
        if agree -> checkout (converted to an normal order)
  quote (create by buyer) vs vendor quote (the quote that sent back to buyer)
  quote status: different for each role
  
  buyer can
    create/submit a quote request
	  say, a buyer convert their active session cart into a quote request, a cart can be prepared from
	    Add items from the storefront
        Add items using the Quick Order feature
        Restore a saved cart
        Importing a cart from a CSV file
	  can save the draft quote for submit later
    view the quote (status)
	cancel/accept vendro quote (Vendor Quote status)
	sometime the checkout fail because some reaonse make the cart change (compare to the time it sent to sales rep e.g. applied new promotion) => customize: QuoteCartValidationStrategy
	requote: create from inactive (canceld, order, expired) quote (quicly from often quote)
    promotion vs order discount and quote discount
  
  sales rep/sell approver
  expired date: default is 30 days
  for each step, a copy of the quote is created (with new version and status for the viewer)

user types: buyer, seller, seller approver
  configurable e.g. commerceservices.quote.buyer.usergroup.uid
  which quotes are visible to which users? 
    AssistedServiceQuoteUserIdentificationStrategy
	DefaultQuoteUserIdentificationStrategy
	DefaultQuoteUserTypeIdentificationStrategy
	DefaultQuoteStateSelectionStrategy
  

implementation (https://help.sap.com/viewer/4c33bf189ab9409e84e589295c36d96e/1905/en-US/3b6500f9d136444f8d56c966ac269cca.html)
  required/recommended exts
    Assisted Service Module is required for the sales rep to modify quotes.
    commerceorgaddon AddOn is not required for Commerce Quotes, but is needed for the order approval process in the buying organization.
    commerceorgsamplesaddon AddOn includes sample data to implement Commerce Quotes in the powertools storefront.
  session cart and quote object: a session cart is converted to a quote when request quote (buyer) or submit quote (sales rep)
  types
    QuoteData/Model
	CommerceCartMetadata
	CommerceCartMetadataBuilder
	QuoteFacade
	QuoteDiscountForm/QuoteForm
	MyQuotesController/QuoteController
	more: https://help.sap.com/viewer/d0224eca81e249cb821f2cdf45a82ace/1905/en-US/a9abcd409d1644e9886a3e92c621e38e.html
  
flow
  tat cat deu thao tac tren session cart (co the 1 so info in QuoteData)
  
  /create
    initiateQuote() 
      getSessionCart()
  	and create quote model from session cart and save
  	remove session cart
  	then convert the created quote model to quote data 
  	  that uses quotePopulator to convert all info
    redirect to /edit quote
      
  	
  /edit
    enableQuoteEdit()
      find quoteModel
      loadQuoteAsSessionCart() - create new or get from cart reference
        if checkout then set previousEstimatedTotal() and remove existing discount from quote model
        else 
  	    update some quote model info 
        	and create cart from the quote: clone and set cart model ref to the quote model  
  	  return the cart model
      then calculate cart and set the created cart to session cart
    then get the cartdata from session cart
      lay quotemodel tu cartmodel.getQuoteRef() and convert to quotedata and set to the cartData
    then fill quote form with data from cart data
      name and des will be filled
    then create product entries from cart data
    return to the view
    
    
  /cart/update
    updateCartEntry()
      that will update whole (and recalculate the cart)
  	and return CartModificationData (mostly entry info)
    then redirect to quote /edit
    
  
  /discount/apply
    applyQuoteDiscount() //for session cart
      get the quoteModel from session cart
      clear old discount from the quote/cart
      create and set the global discountvalue and save the cart model
  
  
   
 
  
  
