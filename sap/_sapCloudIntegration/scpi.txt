overview
  former name: SAP HANA Cloud Integration (SAP HCI)
  why? reliable message exchange between system: more later, is the layer between
    cloud to cloud
    cloud to on-premise
    on-premise to on-premise
  there are some editions (with different features/prices)
 
  tools: https://tinyurl.com/h947dyfx
    adapter development kit
  
  integration artifact types (to deploy)
    data integration
    intergration flow
    value mapping
    ODATA service/api
    rest api (new)
    soap api (new)
	
terms
  integation scenario
  adapter type: connectivity options (to sap integration cloud) (soap, odata...) are implemented by adapter types 
    e.g. SOAP sender adapter, mail receiver adapter...  
  account and sub-account
  tenant: separated allocate for specific customers (all customers use same physical resources, nhung duoc chia ra nhieu tenant rieng biet) - runtime evironment rieng
  1 tenant per sub-account
  integration flow: define (using ui editor) how message is processed - run on JVM cua tenant
  pool (BPMN): sender/receiver/integration process (run by Apache Camel)
  sequence flow: solid arrow
  wsdl, xsd
  channel: technical connection
  step
  intergration flow (iflow) vs message flow: say, itergration flow models actual message flow - base on BPMN
    say, deploy integation flow on a specific tenant
  payload: message body
    
architecture: is a clustered virtual system, main element is tenant (for each sub account)
  tenant: management node and run time nodes - each node is 1 jvm
  management node: interact with dev e.g. deploy, manage runtime nodes, query message log...
  runtime node: processing messages (when deployed, the ifow is transfered to be processed by Apache Camel framework)

how to start?
  request sap cloud platform cockpit account: manage sub accounts, applications e.g. integration suite on each account
  -> subscribe/register for expected application
  https://cockpit.hanatrial.ondemand.com/trial  
  roles: set up in BTP cockpit
    ESBMessaging.send(SendingMessage role): the user role that authorizes a sender when sending message with sap integration cloud
      setup: https://github.com/SAPDocuments/Tutorials/issues/5519\
      e.g. using soap ui with username/password --sendmessage--> sap integration cloud: the username should be setup with the role SendingMessage to allow receive any incoming message
      
integration content catalog
  pre built integration scenarios
    usage term and condition notice (edit or configure only)
    download/import artifact
    revert deploy with version number
    common packages by SAP - connection: 1 way or 2 ways
      successfator
      c4c and sap erp/sap crm/sap marketing cloud e.g. dev for sap erp will use sap integation cloud and this packages to integrate with sap c4c
      sap commerce cloud and ...
      sap marketing cloud and ...
  custom package

adapter
  ftp
  send OData request (to external ODataService)
    request reply -> OData channel -> Query Editor: filter, sort, aggregation algorithm -> message mapping
  receive OData request
    create by scpi web ui or
	create by hybris with outbound integration object
	

message monitoring with WebUI
  each message for 1 integation process (not flow)
message processing with Apache Camel: message routing and mediation engine
  key point: message is pass along the flow, can change content by flow step or after get response when call external service
  message id
  message structure
    header: meta data - sender, encoding, authentication
  message container (exchange): message with some additinal data - pass container along
    exchange id
	exception: error when process message
	MEP: message exchange pattern
	  InOnly: asynchnorous message handling
	  Inout: sysnchnorous message handling
	Properties: additinal data e.g. for global info - differ from header: properties is not transferred to receiver e.g. content-type will affect on receiver side
	in-message
	out-message
  Camel expression: ${}
  built-in Camel variable: https://tinyurl.com/4xe55vma
    in e.g. ${in.body}
	property
	header

  externalize - parameter and configure later
    repeated step?
    repeated data?
    dynamic value (depend on other steps/environment)? e.g. soap address on dev/stg/prod environment

steps
  extenal calls
    request-reply
	  use for synchronous call when need response message
	  only works with adapters OData, http, https, soap
	content enrichment: merge response and request message
	  use when need to enrich the origin message with additional data
	  combine vs enrich
	send: no reply needed	  
  messsage mapping
    e.g. map commerce OData request to SOAP dbm xml request or map SOAP xml response to commerce odata entity
	the mapping engine works for xml format only => need schema for source and target (xsd or wsdl)
    complex mapping with
	  built-in function e.g. transform date format
      custom function with script
	  custom with java function
	  custom with xslt
      custom with value mapping e.g. country name to isocode
    testing with simulator
	note: _MT is just a text because of the habit when define message type is wsdl
  routing
    aggregator: combine multiple incomming messages into 1
	  only support xml
	  define correlation (how to know incomming messages are related) and sequence (when merging)
	  aggregate algorithm
	  timeout
	content based routing
	  router: condition by
	    content
		or header
		overlapping decision with Order
    splitter and gather
	  say, the node use to splitting e.g. //orders (relative path - path by name vs absolute path /orderList/orders - path from root below Body)
	  general spitter: copy parents for each splitted item
	  vs iterating splitter: not copy parents node
	  grouping e.g. 2 items in 1 message
	  streaming: related to memory consumtion, if message large, with streaming scpi will start working on the message even if only a part of message just came.
	  parallel processing
	  stop on exception
	multicast and join (and gather)
	  send message to all branches
	  parallel
	  and sequential
	  
synchronous vs asynchnorous message handling: adatper dependent
  note: phan biet usage of synchronous/asynchnorous message vs synchronous/asynchnorous step (request-reply/content enrich and send)
  are set in MEP field (InOnly/InOut)of the exchange when setting up the channel Message Exchange Pattern property
  synchronous: connection keep open util get response back or timeout
    input ms come -> MEP is set to InOut -> be processed -> at the end, copy input ms body to out ms body and send the out ms back to caller
  asynchnorous: close connection after get confirm that receiver got the request
    set by One-Way for message exchange pattern
	or from wsdl define for soap adapter
	WS-Standard: send and dont care
	Robust: send and make sure the request came to scpi (scpi will send error to caller if any)
	 
structure flow
  integration process: main process
  local integration process
    use to simplify main process (group related steps), only can call by Process Call from parent
	local process use the same message exchange from parent
  exception subprocess: catch any exception from the wrapper process
    error start
	end
	  error end: throw exception
	  end message (the whole message is Completed, use this mainly to add error info to the message and return to caller)
	  escalation
	note: can not catch exception of sub process in main process, need to catch rieng
  ProcessDirect adapter: send message from 1 flow to another flow (same tenant and producer:consumer=N:1), when use?
    can be used to structure flow (like local process)
	or used to reuse integration logic
	or dynamic call processes base on data e.g. if country-Frech => call process1 otherwise call process 2 (dynamic endpoint)
	header propagation: base on setup 
	
jms
  send data to jsm receiver, sender e.g. dbm immediately receives a response with HTTP code 202 (Accepted). The message is processed internally in scpi
  when message failed => is persisted to temporary storage and is pulled by jms sender adapter with the same queue name e.g. CX-INT-055
  can separate the inbound (JMS recevier) and outbound message (JMS sender) to 2 integration flow (easy for testing), just need to make sure the jms id is identical
  message comming => jms receiver store to jms queue (end story for jms receiver)
  => jms sender get from the queue and process, if error the the message is persisted back to the queue

transaction handling: chu y setup required jms transaction in the integration process
  for jms (enable jms transaction handling on the integration process)
    work for integration process level e.g. all jms queues on same integration process are persisted sucess or none.
	after all queues in the same process are stored successfully then the jms senders tuong ung are execute in parallel

exception handling
  the message exchange?
  exception sub process: send back (custom) error to sender
  retry
    with jms (enterprice edition only)
	with data store

error tracking
  error tracking using admin backoffice integration tools and cloud commons menu (admin)
  error tracking with log message monitor
  trace mode to explore message content
  

order exchange use case: 054: acc/service order - when user uploads payment proof
  TmpSapCpiIntegrationOutboundServiceImpl.sendAccessoryOrderToDBM()
  that will call SapCpiOmmOrderOutboundConversionService.convertOrderToSapCpiOrder(orderModel)
    that wil call mappers to map the orderModel to SAPCpiOutboundOrderModel
      which call TmpSapCpiOmmOrderMapperService (extends SapCpiOmmOrderMapperService) to execute mapping - return SAPCpiOutboundOrderModel
        which is call TmpCpiOmmOrderConversionService (extends SapCpiOmmOrderConversionService).convertOrderToSapCpiOrder() - return return SapCpiOrder
          which is call DefaultOrderContributor.createRows (1 row for the order)
          and call TmpOrderEntryContributor.createRows(each row is an order entry)
  then call TmpSapCpiOutboundServiceImpl.sendOrder to scpi 



















    
  
  
	