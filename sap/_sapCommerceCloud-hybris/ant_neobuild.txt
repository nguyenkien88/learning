project: name, default (target), basedir
property
target: set of tasks e.g. all, compile, distribute
task: code that can execute (inside or outside target, thuong la inside)
  attributes
  built-in task: http://ant.apache.org/manual/tasklist.html - da so la su dung built-in task
    <tstamp/> => get the current time for later use e.g. ${DSTAMP}
  refer to another task in java: project.getReference("task1")

target vs taskdef vs task
  task: executable code (e.g. jacoco:report) - task is define in .jar file
  taskdef: add more tasks to current project - e.g. jacoco tasks (contains path to the jar file)
  target: ant run target, contains nhieu task e.g. ant all (all target contains tasks from taskdef in ${platformhome}/lib/ant-contrib-1.0b3.jar)

java agent
  what is it? is app that can intrude JVM, can modify bytecode at runtime
  entry point (of an agent): premain(String agentArgs, Instrumentation inst) - run this method after jvm is initialized
  metadata (of an agent): MANIFEST.MF - important
  to implement an java agent => need skills to change bytecode directly (e.g. insert println statement after call constructor) or using support lib e.g. Javaassist, ASM ...
    transformer: return (to JVM) the modified bytecode class
	Instrumentation (context): register transfomer class
  how to run?
    -javaagent:pathtotheagentjar file as jvm argument  
  
ant-sonar neo
  jenkins does
    set custom workspace: /codengai (no need link to git)
	./setantenv
	run ant tasks (at /platform directory)
	  load properties: sonar/build.properties (${platformhome}, ${project.base.test} ...)
	  jacocoalltests and jacocoallwebtests
	    where is 'jacocoalltests' target defined?? - in acc-ant-sonar.xml (acceleratorservices extension) - this file is imported, final will be available in /platform/build.xml
	    what 'jacocoalltests' does? - taskdef source: jacocoant.jar
		  setup jacoco:agent => export file /log/junit/jacoco.exec => tuy config in jenkins ma se report classes nao
		  run ant alltests => all unit and integration tests will be run
	then copy the jacoco.exec to codengai/codengaicore
how jacoco work?
  using java on-the-fly instrument: mofify exsiting bytecode with running tests??? => default - ko choi duoc voi PowerMockitoRunner
  or using offline instrument
  java agent vs jacoco agent vs powermock agent (https://stackoverflow.com/questions/23363212/powermock-eclemma-coverage-issue)
    jacoco:agent is an ant task that create an jacoco agent => instrument to javabytecode to get coverage
	powermockagent is also a javaagent

=> approach: offline instrument or @Powermockrule (PowerMockAgent - powermock-module-javaagent)
	    
setup server infrastructure
  tutorial: https://www.youtube.com/watch?v=w36lUFR-JXo
  soft
    yum -y update 
    java: yum install java-1.8.0-openjdk
    sonarqube: download package -> unzip -> ./sonarquebe.sh console (9000)
    jenkins: download rpm package -> rpm install xxx.rpm -> systemctl start jenkins
    git: yum install git
	sonar
	  sonarscanner: run scan to get the analysis result
	  sonarqube: server to show the result to ui
	  sonarlint: plugin to run scan on eclipse
  setup jenkins jobs (chu y jenkins plugin dependency)
    can phan biet: classes duoc run test vs classes duoc analysis by sonar vs classes duoc analysis by jacoco
    git account: kiennguyen@sai/roc...@
    jenkins home directory: /var/lib/jenkins
	neo-build: QC server
	  purpose: build source (ant all/production)
	  chown -R jenkins:kien /codengai => change the owner to jenkins user to make the job can full access
	  no customworkspace: code duoc get tu git ve (theo job): /var/lib/jenkis/neo-build/newest source code here
	  prepare
	    unzip hybris 6.7 to /opt/codengai/hybris/
		ant all ([develop]) to create some necessary directory (config...)
		install 3 addons??: maybe
	  job: run the script build_artifacts.sh
		set ant
		copy custom/local.properties, localextentions.xml from the workspace to hybris platform
		ant clean all/production (if want to get zip file)
    sonar
	  setup sonarqube server, get secret text, create project, add hybirs quality profile
	  mannualy
	    add sonar properties (e.g.sonar.projectName...) to local.properties - default localhost:9000??
		add sonar jacoco properties (e.g. sonar.jacoco.reportPaths...) to local.properties)
		run ant jacocoalltests (with options) to get the jacoco.exec (/log/junit/jacoco.exec)
		run ant sonarcheck to analyze and push resolve to sonarqube
	  with jenkins (current)
	    add sonarqube prepare step to sonar job
	    no git - use custom workspace
	    go to /platform
	    run ant jacocoalltests/jacocounittests => /junit/jacoco.exec
	      register jacoco agent
		  run ant alltests/unittests
	    copy jacoco.exec to /codengaicore/jacoco.exec
		run ant all (sonar build.xml-properties get from build.properties)
		  push the report to preconfig sonarqube
	
	
	how qc server, jacoco report (exec), jenkins, sonarqube server connect???
    hybris junitreports???
	how to run sonar?
	  ant sonarcheck (hybris way - properties get from local.properties)
	  or sonar:sonar ant task (standard way - properties get directly from the build file)
	  
	sonar
	  run test
	  create junit report
	  create jacoco report
	  
virtualbox
  install guest addition (chu y dependency e.g. kernel header, gcc...)
    sharefoler
    full screen
	
	
	
error
  JUnitTask...not found => add to sonar/build.xml classpath to the apache-ant-1.9.1/lib (already)
  SolrServerException: add solrserver.instances.default.autostart=false to local.properties
  Sonarqube jenkins unclickable => try run sonar before jenkins (or change sonar cetificate -> guild sonar job -> change back to right cetificate -> build lai)
	
   