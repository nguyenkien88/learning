introduction
  backoffice framework: is an UI framework with the purpose is simplify development of backoffice application
  backoffice application e.g. codengaibackoffice is built on top of Backoffice framework by generate from ybackoffice
  backoffice framework vs old cockpit framework
  built by ZK Framework with bunch of widgets(e.g. Advanced Search widget, Editor Area widget): component to add to backoffice frontend (later) - application is made up from connecting (but stand-alone) widgets 
    
  cockpits (old cockpits and backoffice fw based cockpits)
    many cockpits with own purpose
    mcc: multi channel cockpit
    backoffice cockpit: sum of (product cockpit, customer service cockpit, ...)
    hac (admin console cockipit)
    admincockpit: user and validation
    smartedit/wcms
    cockpits are developed by ZK (zkoss) framework: web/mobile compability
    zul content will be saved/copied at server for next request => faster
    zul vs jsp
      using zul - when site with many dynamic data (ex: cockpit page)
      using jsp - when most are static data
    some backoffice cockpits/perpective (update to date)
      administration cockpit
      product cockpit
      adaptive search cockpit
      customer support cockpit
      data hub cockpit
      order fulfillment cockpit

backoffice framework module
  features: e.g. widgets, editor, action, drag/drop, export excel, testing, uiconfig...https://tinyurl.com/y5fdr29u
  architecture
    backoffice: all built-in widgets, actions... 
    ybackoffic: template
    platformbackoffice
         
widget(component): follow mvc
  concept
    1 group (e.g. advanced search widget, workflow widget) gom .zul, definition.xml, controller
    duoc su dung trong backoffice application
    trong 1 CONTEXT cu the e.g. su dung advanced search cho Product type, admin user
    say, ket noi nhieu widgets voi nhau tao thanh backoffice application
  
  main tasks when working with widgets
    define widget (definition.xml - input, output, valid setting maybe with default value) 
    then create instance of a widget 
      using admin orchestrator 
      or using *widgets.xml
    com.hybris.cockpitng.core.Widget/com.hybris.cockpitng.core.WidgetDefinition
    say, a widget used in the application is an instance of a widget definition
    thuong dung built-in widget e.g. advanced search, explore tree
    when need to define new widget? e.g. codengaiImportExcel
      when need new view
      or new logic (controller)
  
  how to define new widget type?
    create widget defition.xml e.g. id="com.neo.codengai.widgets.codengaiImportExcel"
    create the view/create view directly in controller: e.g uploadfile.zul with elements id e.g. button, area text box
    controller: e.g. com.neo.codengai.controllers.ImportExcelController
      how to link view and controller? using @ViewEvent
      injecting in controller @WireVariable/@Resource
    input: object
    output: object
    parameterize widget
      <settings> - can change at runtime using orchestrator
      e.g. whether my text box in my widget can resize - access from zul view e.g ${widgetSettings.xxx} or controller e.g. getWidgetSettings().getString("xxx")
      thuong la set default value when define widget instance e.g.codengaibackoffice-backoffice-widget.xml
      value can be changed in orchestrator
	  default (common) settings: auto add to all widgets: widgetStyleClass and widgetStyleAttribute, _width/_height (model windows)
	template="true": define if this widget instance is a template widget, if true, then can use admin orchestrator to create new widget based on this
	instance-settings: later
	socketDataType_$T: need to be specified when socket in/out is generic type
  
  how widget communicate? using widget-connection, this is set up outside the widget itself (make widget really flexible in use)
    input socket: I can receive the output of other widget with this id and type
    how can I receive an input? @SocketEvent in Controller
    output socket: I can send this object type with that id to outside world
    how can I send output? call sendOutput method (DefaultWidgetController) or in action ActionResult.addOutputSocketToSend (https://help.sap.com/viewer/5c9ea0c629214e42b727bf08800d8dfa/2005/en-US/2b78716e9dd441f9949da8808a22f4be.html)
    socket-connection: when I send an output, all other sockets with appropriate id and type are received? no (not broadcast), just only the widget that connect with me by
    STUB???
    should use json for in/output
    widget-connection-remove
  special widget
    create-wizard: can use ctx map in configuration file (e.g. send context info to the widget)    
  virtual-sockets: add dynamic socket, in case the widget definition does not define. 
    say, i want this widget receives data through new input socket (not define in definition.xml) => need to define a virtual socket <input id="newSocketId">
	or i want to send data to new output socket => need to define a virtual output socket and send the actual data through an action (or controller if have proper handling mechanism-https://help.sap.com/viewer/5c9ea0c629214e42b727bf08800d8dfa/2005/en-US/2b78716e9dd441f9949da8808a22f4be.html)
	
  
  cockpitWidgetChildrenInvisible?
    auto add to all widgets, do not need to declare explicitly
    is the general slot to put widgets that are not visible in ui but can be accessed by socket api (use to communicate)
  
editor: can add in the widget zul file or using controller
  concept
    e.g. multi reference editor
    also a backoffice component, more fine-grained than widget
    muc dich la dung o nhieu widget khac nhau
    say, use editor inside a widget to manipulate data model of widget
  create an editor - using zkoss component e.g. TextBox: https://tinyurl.com/y4c5z2az
    definition.xml 
      e.g. <editor-definition id="org.myextension.editor.simpletext">
      possible handling type
      render class e.g.  MySimpleTextEditor implements CockpitEditorRenderer<String> - render(final Component parent)
      add event listener e.g. notify to the parent widget about the change in the editor
      adding parameter e.g isMultiLine
      EditorContext???
      create editor using .zul file e.g. view src="boolEditor.zul" (do not use render class) - using default renderer e.g. DefaultZulCockpitEditorRenderer to populate default events to parents
      localize
  use editor in widget
    add editor to a widget e.g. add to .zul file e.g. <editor id="textEditor" type="java.lang.String" onValueChanged="mywidgetController.doThings()" />
    specify the default editor
    binding editor to model e.g. syn model value with editor value
    set intial value: <editor id="textEditor" type="java.lang.String" property="textEditorProperty" value="Put some text here." />
  editor parameter passing: e.g. isMultiLine
    using config e.g. <y:editors>...<y:editor-parameter>
    or in .zul file of widget:  <editors config="testeditors" group="common"/>
    or set using java e.g. editor1.setProperty("mytext");
    or in widget definition e.g. <settings>: will apply for all widget instances, unless is override by above approaches

action: can add in the widget zul file or using controller
  concept
    e.g. delete action
    also a backoffice component, more fine-grained than widget
    muc dich la dung o nhieu widget khac nhau
    using to trigger action depend on the state of widget model e.g. want an icon to appear in a widget after a certain property has a specific value
    default not socket-aware???, extends AbstractComponentWidgetAdapterAware to make it socket-aware
  create action
    definition.xml e.g. <action-definition id="com.hybris.cockpitng.action.myaction">
    MyAction implements CockpitAction<String, String>, return ActionResult
    localize
  use action in widget
    add to the widget view: <action actionId="org.myextension.action.myaction" property="product"/>
    action status flags: OBJECT_MODIFIED, OBJECT_PERSISTED, OBJECT_DELETED
  DefaultActionRenderer: renderer for the action, some default settings e.g. icon, hover, disable icon, name, style class...can customize using *config.xml
  action and editor ui mapping: https://help.sap.com/viewer/5c9ea0c629214e42b727bf08800d8dfa/1905/en-US/b7d4b1d9e7564f5dae5307e821733fb4.html
  
til now: inside <context> can use <base>, <editors>, <actions> and other element depends on the component  
  
composed widget: a widget that can contains other widgets inside
  can view the nested structure in orchestrator e.g."Backoffice Main Layout"
  <widgetslot slotID="nestedWidget"> (widget .zul): only 1 nested widget
  <widgetchildren>: type=tab/list...

important files
   widgets.xml - merge all information e.g. settings, instance id...of all widgets added to application
     store as media, when reset => create lai
     backoffice-widgets.xml
       built-in widget instances (for same widget definition, can have multiple in the app) from hybris
       e.g. mainSlot(the main view off entire backoffice application) contains perspectiveViewSwitcher contains backofficeMainSlot contains explorerTree contains collapsibleContainer 
       contains advancedSearch contains advancedSearchEngine (1 widget tree for a application)
     other-extension-backoffice-widgets.xml e.g kadokawabackoffice-backoffice-widgets.xml: more widget instances
     reference: https://tinyurl.com/y446rhkn
  *-backoffice-config.xml e.g. kadokawabackoffice-backoffice-config.xml: config the view of a widget based on context e.g. how editor-area widget for Product should be show?
  cockpit-config.xml: merge for all above *-backoffice-config.xml files, saved as application media, when reset => create lai

override a widget by config e.g. want to remove existing widget from a slot or change to other widget or change default settings
  using widget-extension (tuong tu voi dung orchestrator drag and drop)
  e.g. customersupportbackoffice-backoffice-widgets.xml defines <widget-extension widgetId="backofficeMainSlot"> then override the slotId="perspectives" with order widget
  extend types
    remove a widget from another widget children: </remove>
    remove all widget children: </remove-all>
    add a child widget: </widget>
    modify template instance behavior settings: </instance-settings>
    modify widget settings: </setting>
    change access restrictions: </access>
    move a widget to another widget: </move>
    specify virtual sockets: </virtual-sockets>
  
extend a widget (with new widget): e.g. change controller behavior or change css
  define new widget with new id
  e.g. <widget-definition id="com.hybris.extended.explorertree.custom" extends="com.hybris.cockpitng.widgets.common.explorertree">
  https://tinyurl.com/yxk85lsj
  
how to override widgetController e.g. override AdvancedSearchEngineController
  create new widget definition.xml copied from advancesearchengine widget
  modify the parent widget (advancesearch), remove the current, add new one - xxxwidgets.xml
  define the controller extends the current controller and override the wanted method

how can i specify which roles can access (see) this widget?
  using in *widgets.xml
    add/remove/replace
    more: https://help.sap.com/viewer/5c9ea0c629214e42b727bf08800d8dfa/2005/en-US/75d58cc59ba14947ae206a313821016b.html#loio75d58cc59ba14947ae206a313821016b
  using *config.xml: @authority, @principal
  

architecture: 2 importants extensions
  backoffice: standard widgets and components
  ybackoffice: for custom

make change in widget zul without rebuild (not including label change)
  backoffice.cockpitng.additionalResourceLoader.enabled=true
  backoffice.cockpitng.uifactory.cache.enabled=false
  backoffice.cockpitng.widgetclassloader.resourcecache.enabled=false
  backoffice.cockpitng.resourceloader.resourcecache.enabled=false

faq: https://tinyurl.com/y35fqrg9

use case: advanced-search widget - dung cho ca advanced and simple search
  definition
    widget id: com.hybris.cockpitng.advancedsearch
    default context code (component value in *config.xml) for advance mode: advanced-search
    controller: com.hybris.backoffice.widgets.advancedsearch.AdvancedSearchController
    sockets
      input: type - String, etc
      output: searchData - AdvancedSearchData, etc
    settings
      disableAttributesComparator, forceSearchForCode, etc
  view: advancedsearch.zul (ko thay define trong definition.xml)
    grid header
    and a widgetSlot for a nested widget e.g. slotID="nestedWidget"
    no actions, no editors
  instantiate (bakoffice-widgets.xml)
    parent: in "center" slot of "collapsibleContainer" widget
    2 children
      advancedSearchEngine in slotId "cockpitWidgetChildrenInvisible"
      and hmc2list (collection browser) in slotId "nestedWidget"
    connections
      <widget-connection sourceWidgetId="advancedSearch" outputId="searchData" targetWidgetId="advancedSearchEngine" inputId="searchData"/>
      many other
  flow: open OrderEntry from explorer-tree component
    
  click Employee on explorerTree component
    ExplorerTreeController calls sendsOutput
    that will trigger AdvancedSearchController call loadConfiguration(typeCode e.g. Employee)
    that will call getWidgetInstanceManager().loadConfiguration(context) - say, load configuration (type, component, principal, authority) for a context
    return new DefaultConfigContext e.g. DefaultConfigContext({component=advanced-search, type=Employee, principal=admin, module=_root_})
  
  click search
    the controller call sendOutputs to advanced search engine controller
    then call FieldSearchFacade - convert the AdvancedSearchQueryData to GenericQuery
    and calls genericsearvice to search
  
use case: filter for navigation node - customer support backoffice: customer.support.1@sap.com/1234
  add filter condition to explorerTree node (advanced search)
  widget: csExplorerTree
  based on <widget-connection sourceWidgetId="csExplorerTree" outputId="nodeSelected" targetWidgetId="allReturnsConditionEvaluator" inputId="input"/>
    when user click node navigation node:  <n:type-node id="customersupportbackoffice.typenode.all.returns" />
    ExplorerTreeController will call sendOutput(String id-dataSelected, Object data-customersupportbackoffice.typenode.all.returns) to allReturnsConditionEvaluator
  based on <widget-connection sourceWidgetId="allReturnsConditionEvaluator" outputId="true" targetWidgetId="allReturnsFilter" inputId="nodeSelected"/>
    the evaluator (ConditionEvaluatorWidgetController) will evaluate the expression to check if the output data should be passed through and send data to allReturnsFilter
  based on <widget-connection sourceWidgetId="allReturnsFilter" outputId="outContext" targetWidgetId="csAdvancedSearch" inputId="initContext"/>
    the allReturnsFilter (AllReturnsFilterController) will modify the search condition before send to advanced search

.properties configuration: https://help.sap.com/viewer/5c9ea0c629214e42b727bf08800d8dfa/2005/en-US/22f98bab81004e4fac3a507d9647e34d.html
localization: for widget/action/editor
  .zul: ${labels.button}
  controller: WidgetInstanceManager
  override: override by override internal name - componentid.labelId
  loading labels
    Labels.get("com.hybris.cockpitng.valueChooser.workflows.status.planned")
    widgetInstanceManager.getLabel("workflows.status.planned") -without the widget ID prefix

remain
  widget model: https://help.sap.com/viewer/5c9ea0c629214e42b727bf08800d8dfa/2005/en-US/8c6504368669101487aabaf511a3ee3e.html
  template widget, instance-settings
  widget group
  read through *backoffice-config.xml

  

