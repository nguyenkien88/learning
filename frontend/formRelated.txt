https: the data (including form) is encrypted before sent
viewpagesource(origin content) vs inspect(current content)
pseudo-class
  define a state of an html element at specific time
  used to style e.g. a:visited {color:red}, validate form, checkbox/radio select...
  :hover
  :focus
  :active
  :required/:optional
  all: https://www.w3schools.com/css/css_pseudo_classes.asp

html form
  structure a form
    screen reader?
    <form>: no nested
    form control can be outside the form: them attr form="formId"
	<fieldset> and <legend>
	<section>
	<ul>, <ol>, <li>
	<label for=""> and <label><input></label>
  form control (input/textarea/button/select)
    cuoi cung thi data send to server as: name(name attr)/value pair
	readonly(sent with other form data) vs disable (is not sent to server)
    once the form is submitted all form controls that have a name attribute are sent except non-selected checkable(checkbox and radio)
  <input>
	text(default and fallback if browser not support a type)
	password
	hidden (hidden ui, data still sent to server)
	checkbox: only checked items are sent (same name => can map as List<String> e.g. list of id)
	radio
	button/submit/reset: act same as a button - khac nhau o style and the label content
	img: like <img> but can be used to submit the form
	file: accept="image/*;capture=camera" => mobile use cam
	html5: differ from how browser support enter value and validate when submit(e.g. not validate when click e type="button")
	  email: pattern
	  search: differ with text on how browser support e.g. style and auto save to autocomplete
	  tel: browser on smart device can support by auto using numberic keypad
	  url: with protocol
	  number: min/max/step
	  range: use along with <output>
	  date, time: date/time/month/week/datetime-local: support differ between browser - thuong dung lib - https://flatlogic.com/blog/best-javascript-date-picker-libraries/
	  color: 
  <select>
    <option>: if not specify value attr => use content to submit
	selected
	optgroup: grouping
	multiple
  <datalist id="thesuggestionlist">: autocomplete, use along with <input list="thesuggestionlist">
  <progress>/<meter>: dynamic by js
  <button>: type=submit/reset/button(use js to handle submit)
  
form styling: https://developer.mozilla.org/en-US/docs/Learn/Forms/Styling_web_forms

client side validation: good for user experience, used combine with server validation
  2 types: built-in validation e.g. input type="email" and custom validation using js
  built-in
    required
	minlength/maxlength
	min/max
	type
	pattern
	when an element is valid/invalid, the pseudo-class :valid/:invalid(st other pseudo-class is added) auto added to the element e.g. input:valid
  js: e.g. customize the validation message: with or without using Constraint Validation API
	with Constraint Validation API
	  use along with aboves built-in validation attributes
	  e.g. add inputlistener -> if(!email.validity.valid) => if(if(email.validity.valueMissing)){errorSpan.textContext='er ne'}
    without Constraint Validation API (without using built-in validation attrs): it's better using lib e.g. Validate.js
	  
submit form
  if the action is https, the page is not => still encrypted
  if the page is https, the action is not => browser auto notify user
  submmit form with GET method (GET method is empty body) => the input auto show on url
  submit as normal: full page reload
    using input/buton type = submit
	js: formElement.submit()
  submit using ajax: must manually handle response by callback function
    using XMLHttpRequest: mannual build the request and send (can specify synchronous request but not recommended)
	using XMLHttpRequest and FormData(create or bind from an existing html form): XHR.send(aFormData);
    using jQuery: $.getJSON/$.ajax/$.get/$.post (note: $.submit()-handler, trigger when form is submit->do st and actual submit inside)

form validation
  normal submit: add message to redirectmodel => have a error div for every page to check if error not empty => show
  ajax: handle normal using javascript
    set html content
	using jquery template...
	
FormData
  can submit type String or Blob or File
  using FormData with file attach: need to read the file manually then append to the FormData

spring mvc plus
  @DateTimeFormat
  URI template: @PathVariable(name/regex/antPathPattern/configurable pattern e.g. ${...}/@MatrixVariables)
  consumes="application/json"/"!text/plain": only match for request header with content-type
  and produces: for Accept request header
  params="param1=kaka"
  headers="attr1=value1"
  handler method signature: arbitrary order except BindingResult
    request/response e.g. ServletRequest/HttpServletRequest/ServletResponse/HttpServletResponse
	@RequestBody Object body => convert the request body (thuong la json) to java object
	HttpSession
	@PathVariable/@MatrixVariable/@RequestParam(required by default)
	Model/Map/ModelMap/RedirectAttributes(when return :redirect => spring use this instead of the Model)
	@InitBinder/@ModelAttribute/Error/BindingResult (must after the command/modelatribute object)
	  as method level: run before every request mapping: add attr for model - use as a common data for controller
	  as method arg: 
	    step 1: get the argument object from model (neu ko co san thi init using default constructor)
		step 2: binding data by name (and validate using @Valid)
		step 3(optional): validate using validator
    full list: https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html 
  handler return type
    ModelAndView/Model/Map/View/String
    void
    @ResponseBody e.g. auto covert object and return [json] in response body
	HttpEntity/ResponseEntity: more power full than @RequestBody, can custom to the response header, status.
	  binh thuong Spring se handle header/status
	full list: https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html
  @SessionAttribute: the model attr once created will be last for whole session
  RedirectAttributes: when controller redirect, attrs in RedirectAttributes model will be used instead of normal Model
  Flash attrs
  @CookieValue
  @RequestHeader
  @InitBinder: use in controller level, process request param e.g. trim String type before mapping to handler
  
HandlerInterceptor/HandlerInterceptorAdapter e.g. RequireHardLogin
  run before/after(before view is rendered)/complete(view is rendered) handle a request
  interceptor(already map to handler) vs filter (still not mapping to handler)
  
Exception handling
  @ExceptionHandler
  @ControllerAdvice
  ...




	
building custom form controls
ajax
  submit FormData with ajax
display fields error and global error  
validation message
  normal form submit: flash message
  ajax: handle using javascript


