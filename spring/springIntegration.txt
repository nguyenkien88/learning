SI is all about messaging transformation
overview
  EAI: enterprise application integration main functions
    transform data (format)
  EIP: Enterprise Integration Patterns
  is a spring project for integration purpose - sharing data between applications
  based on spring design (core, patterns)
  message-driven

  
terms
  message: data transferd by SI, includes
    header
    payload
  endpoint: components that push (producer)/consume(consumer) message from a channel, producer/consumer can be
    Adapters
    Gateways or
    Filters or
    Transformers or
    Enrichers or
    Service Activators or
    Routers
  message channel: connect enpoints, types
	or publish subcribe/subscribable channel: thuong dung cho event message, no queue (no buffer), just push the message to all subscribers
    point to point/pollable channel: thuong dung cho document message, queued (has buffer), push message to single subscriber (neu co nhieu => get thang dau tien), khi nao queue empty thi code moi chay tiep
	direct channel: 1 subscriber, no queue (lai giua 2 cai tren)
  adapter: endpoint to connect channel with external system e.g database (your code should not know about the external system, let Spring take care of)
    normally used to push/pop message from/to a channel
    has 2 types: inbound and outbound
    some built-in adapter: Stream (ex: stdin, stdout...), file, jdbc, mail...
	can build custom adapter
  filter: sit between channels, filter messages through channels e.g. only accept json message, only accept messages that contains sales data
    decide based on header or payload of the message
	use built-in by Spring 
	  file filter
	  xpath filter
	  xml filter
	  validating filter e.g. only string that follow a schema is passed
	or build custom filter (message selector)
	can have optional channel to get the discarded messages: discard-channel
  transformer/translator: sit between channels, transform messages (payload, structure) e.g. transform xml to json
    built-in transformers: e.g. object/xml, object/string, object/json...
	tip: generate java class from xml schema (jaxb)
  router: distribute messages from 1 to multiple channels
    content routers: inspect the message to navigate to appropriate channels
	  xpath router
	  sprintEL router
	  ...
	recipient routers: no inspect, just pass the messaged to all registerd channels
  enricher: special type of transformer - enrich messag - add more info to
    header: standard e.g. priority or custom header
	or payload
	custom enricher with request channel and service activator
  service activator: connect message channel to some service to to some work, the activator is triggered when a message come into the channel
	optional return value (and send to output channel)
	if return value but not specify output-channel then Spring will use the replyChannel in header to determine the channel
	thuong dung de link SI voi business process e.g. sendEmail???
	thuc chat co the dung de thay the transformer, enricher...
  gateway: connecting point when calling SI, e.g. calling spring integration by calling a normal service (configurable) -  no implementation needed e.g. service.send(message) - to input channel
    synchronous gateway
	assynchronous gateway
  
	
    
    
  
    
	
	
